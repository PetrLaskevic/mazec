Protokol je přes TCP, textový. Ve zprávách se server a klient vždy střídají,
protokol je v zásadě primitivní RPC. Iniciátor komunikace je klient.

Pro daného uživatele lze najednou procházet pouze jeden level. Pokud daný
level umožňuje více spojení najednou, další spojení lze navázat až poté, co
server potvrdil zprávu LEVL u prvního spojení.

První čtyři znaky každé zprávy je příkaz, zbytek jsou volitelné parametry.
Celá zpráva je kódována v ASCII. Zpráva je ukončena newlinem. Server
rozeznává LF i CRLF a vrací odpověď zakončenou stejným způsobem jako byl
požadavek.

Server odesílá následující zprávy:

DONE			Očekávám další zprávu. (-> LEVL, GET*, WHAT, MOVE)
DATA <int> [<int>...]	Odpověď s daty (-> GET*, WHAT, MAZE, MOVE). Pouze
			MAZE vrací více než jeden <int>.
NOPE <string>		Server akci záměrně neprovedl. Obsahuje důvod.
			Spojení není ukončeno, klient může poslat další
			zprávu.
OVER <string>		Hra končí, server ukončuje spojení. Došlo k chybě nebo
			k vítězství. Obsahuje zprávu, kterou je vhodné si
			přečíst.

A přijímá tyto:

USER <string>		Povinně první zpráva protokolu. Přihlašuje uživatele.
			(->DONE nebo OVER). Může selhat na neexistenci
			uživatele.
LEVL <string>		Povinně druhá odeslaná zpráva klientem. Vybírá level
			přes kódové jméno (->DONE nebo OVER). Může selhat na
			neexistenci levelu.
WAIT			Čekám na spuštění přes frontend (->DONE nebo OVER).
			Selže při timeoutu.

GETW			Dotaz na šířku (->DATA). Je zaručeno, že tato
			hodnota se v průběhu nebude měnit.
GETH			Dotaz na výšku (->DATA). Je zaručeno, že tato
			hodnota se v průběhu nebude měnit.
GETX			Dotaz na X hráče (->DATA). Levý horní roh je X = 0,
			Y = 0.
GETY			Dotaz na Y hráče (->DATA)
WHAT <int> <int>	Dotaz na barvu na políčku (->DATA nebo OVER, pokud je
			mimo rozsah 0-W, 0-H)
MAZE			Vrať barvy všech políček (->DATA). Políčka jsou
			vrácena jako jednorozměrný seznam postupně po
			řádcích počínaje levým horním rohem. Pro
			interpretaci je tedy potřeba se zeptat na šířku
			a výšku.
MOVE <char>		Pohybový (zatím) příkaz (->DONE nebo NOPE, pokud pohyb
			nelze provést, OVER pokud dojde k vítězství/prohře)

Na libovolné porušení protokolu server reaguje zprávou OVER a ukončením
spojení. Pokud chce klient skončit, prostě spojení ukončí sám. Pokud se klient
dlouho neozve, server uzavře spojení bez varování.

Jako pohybový příkaz server rozeznává (ze začátku) 'W', 'S', 'A', 'D'. Časem se
bude měnit význam těchto příkazů a můžou přibýt další.

Typický průběh:

	Klient			Server
	USER ucastnik
				DONE
	LEVL protab
				DONE
	WAIT
		........
				DONE
	GETW
				DATA 500
	GETH
				DATA 500
	GETX
				DATA 0
	GETY
				DATA 0
	MOVE D
				DONE
	MOVE S
				OVER Vyborne! Dalsi vyzvou je "matfyz".

Server měří čas od prvního příkazu z druhé skupiny, tj. GET*, WHAT nebo MOVE.

Knihovny by měly nabízet nějaké pekné API k odesílání těchto zpráv, a nabízet
dva režimy fungování:

1) Předám knihovně callback, tím se odešle WAIT, a callback se mi volá ve
   smyčce během hry. Návratovou hodnotou callbacku je char, odeslaný jako další
   pohybový příkaz. Předpokládaný způsob. Pokud je to možné, měl by jít jako
   callback zaregistrovat 'readkey' :) Knihovna odchytává výjjimky vyhazované
   odpovědí OVER, reaguje na ně ukončením smyčky.
2) Vše si dělám sám, po inicializaci knihovny volám RPC cally, chyby řeším
   ručně.

Kdykoli server odpoví OVER, knihovny vyhodí výjimku. V případě Cčka bude
možnost zaregistrovat si funkci jako error handler. Pokud nastane
chyba, je zavolána tato funkce; pokud se funkce vrátí nebo není definována,
program bude ukončen s vypsáním chybové hlášky na stderr. Pokud by někdo
fakt potřeboval nějaký pokročilý error handling, může použít longjmp
(knihovna s tím tedy musí počítat).

Knihovny musí umožňovat odeslání ručné sestrojené zprávy, na kterou vrátí
syrovou odpověď. Měly by exportovat svoje funkce, kterými ošetřují chyby (OVER)
a přečtou zprávu DATA. V pozdějších levelech tedy můžeme nějakou funkcionalitu
přidat (zatím to není v plánu). Pokud je to možné, měly by "normální" API volání
být jednoduché abstrakce, jejichž zdroják nebude utopený v síťovém kódu (tj.
třeba v header file). Příklad:

int maze_what(unsigned x, unsigned y) {
	char buf [256];
	snprintf("WHAT %u %u", 256, x, y);
	maze_custom_call(buf, buf);
	maze_handle_over(buf);
	maze_assert_message_type(buf, "DATA");
	return maze_parse_data(buf);
}

Knihovna by měla fungovat vícekrát za běh programu. Mělo by být možné jedním
spojením mapu prozkoumat, druhým projít. Také by knihovny měly umožnit mít
více spojení najednou, tj. nepoužívat globální proměnné, ale stav si držet
v nějakém objektu.
